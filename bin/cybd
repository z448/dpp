#!/usr/bin/env perl
# repath and archive finished build on remote host

use 5.010;
use warnings;
use strict;

use JSON::PP;
use File::Find;
use File::Path;
use File::Copy;
use Term::ANSIColor;
use Config;
use FindBin;
use lib "$FindBin::Bin/../lib";
use open qw< :encoding(UTF-8) >;
use Cydia::Meta;

say "### cybd STARTING";
my @directories = ( "$ENV{HOME}/.cypm/pool/cy" );
my @packlist_orig;
my $p5 = sub {
     my @v5 = qx|perl -v|;
     my $v5 = '';
     for( @v5 ){
         if( /\(v5/ ){ s/(.*?\(v)(5.*?)\)(.*)/$1$2/; $v5 = $2 and last; }
     }
     return $v5;
};

my $p5v = $p5->();


# --define dir paths
my $base = "cy";
my $installsitelib = $base . $Config{installsitelib};
$installsitelib =~ s/^\///;

my $installbin = $base . $Config{installbin};
$installbin =~ s/^\///;

my $cytar_lib = $base . $installsitelib;
$cytar_lib =~ s/(.*?)(\/.*)/$1/;

my $cytar_bin = $base . $installbin;
$cytar_bin =~ s/(.*?)(\/.*)/$1/;

# --

system("mv $base/lib/* $installsitelib/");


sub wanted { 
    if ( $_ eq '.packlist' ){
        chomp;
        push @packlist_orig, "$File::Find::dir/$_";
    }
    return \@packlist_orig 
}
find(\&wanted, @directories );

say "original packlist";
say @packlist_orig; 


#find( sub { move("$File::Find::dir/$_", $installbin) }, qw< cy > );
#say "find: moving $File::Find::dir/$_ -> $installbin";


my $O_O = sub {
    my $line = shift;
    my $colo = 'white on_bright_black';
    my $name = 'log:';
    my $say = sub { say colored([$colo], $name ).'->'.colored([$colo], $line) };
    $say->();
};

# todo: add xz/lzma compression option (1)
my $move_pack = sub {
    my $repo = shift;
    my $cargo = <<"_CYDIA";
    cat .www >> ../.stash/cydia/.www
    mv *.deb ~/.cypm/.stash/cydia/deb
    cd $ENV{CYSTASH}/cydia
    cysp
    tar -zcvf cydia.tgz Packages.gz deb .www
    scp cydia.tgz $repo:~/www/cydia
_CYDIA
    my $transfer = sub {
        system("$cargo");
    }; $transfer->();
};

my $make_pack = sub { 
    my $pm = shift;
    my $ar = <<"_DEB";
    cd $pm; tar -xvf data.tar.gz;
    rm data.tar.gz;
    tar czf ../data.tar.gz $installsitelib $installbin;
    cd DEBIAN/;
    tar czf ../../control.tar.gz *;
    cd ../..;
    echo 2.0 > debian-binary;
    arfp r $pm.deb debian-binary control.tar.gz data.tar.gz;
_DEB
    #tar czf ../data.tar.gz [a-z]*;
    my $package = sub {
        my $packer = shift;
        my $status  = system($packer);
    }; 
    my $status = $package->($ar);
};

my $check_pack = sub {
    my $p = shift;

    for my $pack( @$p ){
            $O_O->( "STARTING check_pack" );
            say "- module: $pack->{path}";
            say "- pkg: $pack->{pkg}";

            # -- list content of received packlist
            say "- packlist content:";
            for(@{$pack->{ packlist }}){ say $_ }
            # --
    
            my $make_path = system("mkdir -p $pack->{pkg}/DEBIAN");
            my $control = system("touch $pack->{pkg}/DEBIAN/control");
            my $fh = undef;

            say "- creating control file for $pack->{module}";

            my $fn = "$ENV{HOME}/.cypm/pool/$pack->{pkg}/DEBIAN/control";
            open( $fh, '>', $fn ) or die "can't open $fn: $!";
            print $fh control("$pack->{module}") . "\n";
            close $fh;

            say "- control content:"; 
            say control($pack->{module});

            my $packlist_fh = undef;
            open( $packlist_fh, "> $pack->{path}" ) or die "cant open it $!";

        #rewrite original packlist
            for(@{$pack->{ packlist }}){
                say $packlist_fh $_;
            }; close $packlist_fh;

        #create new data.pack using new packlist
            my $datapack = sub {
                my $tar = system("tar cz -T $pack->{path} -f $pack->{pkg}/data.tar.gz");
                my $mv = system("mv $pack->{path} $pack->{pkg}/");
            };
            print "\npulling datapack: ";  $datapack->();


        #call makepack, build deb
            print "\npackaging deb: "; $make_pack->( $pack->{ pkg } );
            #$O_O->( "make>pack>status->$status |$pack->{pkg} in stash|" ) unless $status;
            
        #move new packlist
        #system("mv $pack->{path} $pack->{pkg}");

        #web
            print "\nhtml div:"; web($pack->{module});
            #$O_O->( "make>html>components->ok" ) unless $div;
    }

};

my $list_pack = sub {
    my $p = shift;
    my @pack = ();
    my @meta = ();

    say $O_O->( "### list_pack ### -> received packlists:" );
    for( @$p ){ say $_ }
    say "###";

    for my $path( @$p ){
        # make module($pm) name from packlist($path)
        my $module = $path;
        $module =~ s/(auto.*?\/)(.*?)(\/\.packlist)/$2/;
        $module = $2;
        $module =~ s/\//\:\:/g;

        #read content(file paths) of current packlist
        open( my $fh, "<", $path );
        # --

        while(<$fh>){
            chomp;

            #content(file paths) of current packlist
            say $O_O->( "### list_pack ### -> received packlists:" );
            while(<$fh>){ say $_ }
            # --

            if( /\cy\// ){
                if(/^perllocal/){
                    say "### list_pack ### -> skipped: $_";
                } else {
                    push @pack, $_;
                    say "### list_pack ### -> added: $_";
                }
                
            }
        };
        
        my $meta = meta($module);
        my $pkg = $meta->{pkg};

        my $pack = {
            pkg         =>  $pkg,
            module     =>  $module,
            path        =>  $path,
            packlist    =>  \@pack,
        };         
    push @meta, $pack;
    close $fh;
    }
    $check_pack->( \@meta );
};

$list_pack->(\@packlist_orig);
my $repo = 'mobile@load.sh';
#$move_pack->($repo);

__DATA__
1. xz/lmza on telesphoero needs fix4 
tar -cf - usr | xz -9 -c - > ../data.tar.xz
tar -cf - usr | lzma -9 -c - > ../data.tar.lmzm
