#!/usr/bin/env perl
# repath and archive finished build on remote host

use 5.010;
use warnings;
use strict;

use JSON::PP;
use File::Find;
use File::Copy;
use Data::Printer;
use Term::ANSIColor;
use Cydia::Meta;

my @directories = ( './');
my @packlist_orig;
my $p5 = sub {
     my @v5 = qx|perl -v|;
     my $v5 = '';
     for( @v5 ){
         if( /\(v5/ ){ s/(.*?\(v)(5.*?)\)(.*)/$1$2/; $v5 = $2 and last; }
     }
     return $v5;
};

#my $p5v = &$p5_version;
my $p5v = $p5->();

move( "usr/local/lib/perl5/man", "usr/local/man" );
move( "usr/local/lib/perl5/bin", "usr/local/bin" );
move( "usr/local/lib/perl5/lib/perl5", "usr/local/lib/perl5/lib/".$p5v );
move( "usr/local/lib/perl5/lib", "usr/local/lib/perl5/site_perl" );
unlink("usr/local/lib/perl5/lib/perl5/arm-iphoneos-2level/auto/ExtUtils/MakeMaker/.packlist");

sub wanted { 
    if ( $_ eq '.packlist' ){
        chomp;
        push @packlist_orig, "$File::Find::dir/$_";
    }
    return \@packlist_orig 
}
find(\&wanted, @directories );

say "original packlist";
say @packlist_orig; 

sub make_pack { 
    my $pm = shift;
    my $ar = <<"_DEB";
    cd $pm; tar -xf data.tar.gz;
    rm data.tar.gz;
    tar czf ../data.tar.gz us*;
    cd DEBIAN/;
    tar czf ../../control.tar.gz *;
    cd ../..;
    echo 2.0 > debian-binary;
    arfp r $pm.deb debian-binary control.tar.gz data.tar.gz;
_DEB
    #/var/root/perlpowertools/bin/ar r $pm.deb debian-binary control.tar.gz data.tar.gz;
    #tar czf ../data.tar.gz [a-z]*;

    my $pack = sub {
        my $packer = shift;
        my $status  = system("$packer");
        return $status;
    }; 
    my $s_pack = $pack->($ar);

    my $clean = sub {
        my $mess = shift;
        say 'now in make_pack->$clean';
        my $s_clean = system("rm -rf $mess");
        return $s_clean;
    };
    my $usr = 'usr';
    my $s_clean = $clean->($usr);
    return $s_clean;
}


my $check_pack = sub {
    my $packlist = shift;
    my @m = @$packlist;

    for my $pack( @m ){
            say "\nreceived packlist for $pack->{ pm_name }";
            say "\tpath: $pack->{ path }"; print "processing content: \n";
            say "\t".$_ for @{$pack->{ packlist }};
    
            my $make_path = system("mkdir -p $pack->{ pkg }/DEBIAN");
            my $control = system("touch $pack->{ pkg }/DEBIAN/control");
            my $fh = undef;
            my $fn = "$ENV{HOME}/.cypm/pool/$pack->{ pkg }/DEBIAN/control";
            open( $fh, '>', $fn ) or die "can't open $fn: $!";
            print $fh control($pack->{pm_name})."\n";
            close $fh;

            my $packlist_fh = undef;
            open( $packlist_fh, "> ./.pack.list" ) or die "cant open it $!";
            for(@{$pack->{ packlist }}){
                print $packlist_fh $_."\n";
            }
            close $packlist_fh;

            my $tar = system("tar cz -T '.pack.list' -f '$pack->{ pkg }/data.tar.gz'");
            my $status = make_pack($pack->{ pkg });
            say colored(['red'],"pm::ok > ")."$pack->{ pkg } ready (deb in stash)" unless $status;
            #my $cleanup = $clean->($pack->{ pkg });
            #say colored(['blue on_white'],"$pack->{ pkg } data pack moved to  stash") unless $cleanup;
            return $status;
    }
};


my $list_pack = sub {
    my $packlist = shift;
    my @meta = ();

    for my $path( @$packlist ){
        my $pm_name = $path; $pm_name =~ s/(auto.*?\/)(.*?)(\/\.packlist)/$2/; $pm_name = $2;
        my $pkg_name = 'lib'.lc $pm_name.'-p5';
        $pkg_name =~ s/\//\-/g;
        $pm_name =~ s/\//\:\:/g;
        open( my $fh, $path );

        my ( @pack ) = ();
        while(<$fh>){
                chomp;
                my $base = qr/$ENV{HOME}/; 
                unless( /$base\/.cypm/ ){
                    say "skiping $_"; next }
                else  {
                    s/(.*?\.cypm\/.*?\/)(.*)/$2/; 
                    s/(usr\/local\/lib\/perl5\/)(lib\/perl5)(.*)/$1site_perl\/$p5v$3/;
                    s/(usr\/local\/)(lib\/perl5\/bin)(.*)/$1bin$3/;
                    s/(usr\/local\/)(lib\/perl5\/man)(.*)/$1man$3/;
                    
                    push @pack, $_ unless /perllocal/ and say "adding into packlist $_" 
                }
                        
                    
            }; say "packlist repath done:".@pack;
            
            my $pack = {
                pkg         =>  $pkg_name,
                pm_name     =>  $pm_name,
                path        =>  $path,
                packlist    =>  \@pack,

            }; push @meta, $pack;
        
        close $fh;
        $check_pack->( \@meta );
        }
        #say encode_json \@meta;
    };



    


#my $arch = $archive_pack_->( \@packlist2 );
$list_pack->(\@packlist_orig);

#print $path
