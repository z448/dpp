#!/usr/bin/env perl
# repath and archive finished build on remote host

use 5.010;
use warnings;
use strict;

use JSON::PP;
use Term::Pulse;
use File::Find;
use File::Path;
use File::Copy;
use Term::ANSIColor;
use Config;
use FindBin;
use lib "$FindBin::Bin/../lib";
use open qw< :encoding(UTF-8) >;
use Cydia::Meta;

my $cybase = "$ENV{HOME}/.cypm/pool";
print colored(['black on_white'],"cybd: staring build") .  "\n\n";

my( $base )= qw< ./cy >;
my @packlist_orig = ();

print "\n\n" . colored(['black on_yellow'],"STARTING find ") . "\n";
sub wanted {
    if(/\.packlist/){
        push @packlist_orig, "$File::Find::dir/$_";
    } else {
        #say "no packlist " . $_;
    }
}
find(\&wanted, $base);

print colored(['yellow'],"found packlists: ") . "\n";
say @packlist_orig; 

# --define dir paths
my $installsitelib = $Config{installsitelib};
$installsitelib =~ s/^\///;
mkpath($installsitelib);
print colored(['magenta'], "installsitelib: ") . $installsitelib . "\n";

my $installbin = $Config{installbin};
$installbin =~ s/^\///;
mkpath($installbin);
print colored(['magenta'], "installbin: ") . $installbin . "\n";

my $installsiteman1dir = $Config{installsiteman1dir};
$installsiteman1dir =~ s/^\///;
mkpath($installsiteman1dir);
my $installman = $installsiteman1dir;
$installman =~ s/(.*\/)(man1)/$1/;
print colored(['magenta'], "installsiteman1dir: ") . $installsiteman1dir . "\n";

my $installsiteman3dir = $Config{installsiteman3dir};
$installsiteman3dir =~ s/^\///;
#$installsiteman3dir =~ s/(.*\/)(man3)/$1/;
mkpath($installsiteman3dir);
print colored(['magenta'], "installsiteman3dir: ") . $installsiteman3dir . "\n";


my $cytar_lib = $installsitelib;
$cytar_lib =~ s/(.*?)(\/.*)/$1/;
#print colored(['magenta'], "cytar_lib: ") . $cytar_lib. "\n";

my $cytar_bin = $installbin;
$cytar_bin =~ s/(.*?)(\/.*)/$1/;
#print colored(['magenta'], "cytar_bin: ") . $cytar_bin . "\n";


# todo: add xz/lzma compression option (1)
my $move_pack = sub {
    my $repo = shift;
    my $cargo = <<"_CYDIA";
    cat .www >> ../.stash/cydia/.www
    mv *.deb ~/.cypm/.stash/cydia/deb
    cd $ENV{CYSTASH}/cydia
    cysp
    tar -zcvf cydia.tgz Packages.gz deb .www
    scp cydia.tgz $repo:~/www/cydia
_CYDIA
    my $transfer = sub {
        system("$cargo");
    }; $transfer->();
};

my $make_pack = sub { 
    my $pm = shift;
    my $ar = <<"_DEB";
    cd $pm; tar -xvf data.tar.gz;
    rm data.tar.gz;
    tar czf ../data.tar.gz $installsitelib $installbin;
    cd DEBIAN/;
    tar czf ../../control.tar.gz *;
    cd ../..;
    echo 2.0 > debian-binary;
    arfp r $pm.deb debian-binary control.tar.gz data.tar.gz;
    mv $pm.deb ~/.cypm/.stash/deb;
    rm -rf debian-binary control.tar.gz data.tar.gz DEBIAN;
_DEB
    #tar czf ../data.tar.gz [a-z]*;
    my $package = sub {
        my $packer = shift;
        my $status  = system($packer);
    }; 
    my $status = $package->($ar);
};

my $check_pack = sub {
    my $p = shift;
    my $cpanm = {};

    $cpanm->{lib} = "$base/lib/perl5";
    $cpanm->{bin} = "$base/bin";
    $cpanm->{man} = "$base/man";

    print colored(["white on_red"], $cpanm->{lib}) . "\n";
    print colored(["white on_red"], $cpanm->{bin}) . "\n";
    system("mv $cpanm->{lib}/* $installsitelib");
    system("mv $cpanm->{bin}/* $installbin");
    system("mv $cpanm->{man}/* $installman");
    #system("rm -rf cy");
    print "\n";
    print colored(['magenta'],"system ") . "$cpanm->{lib}/* $installsitelib";
    print colored(['magenta'],"system ") . "$cpanm->{bin}/* $installbin";
    print colored(['magenta'],"system ") . "$cpanm->{man}/* $installman";
    #print colored(['magenta'],"rm -rf cy ") . "$base";

    #print colored(["cyan"],"$installsitelib\n$installbin\n\n$cytar_lib\n$cytar_bin") . "\n";

    for my $pack( @$p ){
            print "\n\n" . colored(['black on_yellow'],"STARTING check_pack ") . "\n";

            # -- list content of received packlist
            print colored(['magenta'],"packlist path: ") . $pack->{path} . "\n";
            print colored(['magenta'],"pkg: ") . $pack->{pkg} . "\n";
            print colored(['yellow'],"packlist content: ") . "\n";
            for(@{$pack->{packlist}}){ say $_ }
    
            my $make_path = mkpath("$pack->{pkg}/DEBIAN");
            #my $make_path = system("mkdir -p $pack->{pkg}/DEBIAN");
            #my $control = system("touch $pack->{pkg}/DEBIAN/control");

            my $fh = undef;
            my $fn = "$ENV{HOME}/.cypm/pool/$pack->{pkg}/DEBIAN/control";
            open( $fh, ">", $fn ) || die "cant open $fn";
            print $fh control("$pack->{module}") . "\n";
            close $fh;
            print colored(['yellow'],"created control file for: ") . $pack->{module} . "\n";
            say control($pack->{module});


            my $installsitelib_dir = $installsitelib;
            $installsitelib_dir =~ s/(.*?)(\/.*)/$1/;
            my( $cypm_packlist ) = ();

            find( sub{ if( /\.packlist/ ){ 
                        $cypm_packlist = "$File::Find::dir/$_";
                        print colored(['white on_red'],"unlink ") . $pack->{path} . "\n";
                        unlink($pack->{path});
            }}, $installsitelib_dir );
                
            
            print colored(['yellow'], "writing files to $pack->{pkg}/.packlist") . "$File::Find::dir/$_" . "\n";
            find( sub{ unless(/perllocal\.pod/){
                        if( -f $_ ){ 
                            open( my $findh, ">>", "$cybase/$pack->{pkg}/.packlist" ) || die "$!: cant open $pack->{pkg}/.packlist";
                            print colored(['magenta'], "writing file: ") . "$File::Find::dir/$_" . "\n";
                            say $findh "$File::Find::dir/$_";
                        } else {
                        print colored(['yellow'], "skipping dir: ") . "$File::Find::dir/$_" . "\n";
                    }}}, ($installsitelib, $installbin, $installman ));

            #create new data.pack using new packlist
            my $datapack = sub {
                my $tar = system("tar cz -T $pack->{pkg}/.packlist -f $pack->{pkg}/data.tar.gz");
            }; $datapack->();
            print colored(['yellow'], "using: ") . "$pack->{pkg}/.packlist for data.tar.gz" . "\n";

            #call make_pack, build deb
            unless( $make_pack->($pack->{pkg}) ){
                say $pack->{pkg} . ': ok';
            }
            
            #web
            #web($pack->{module});
            #print colored(['yellow'], "writing: ") . " <div> " . "\n";
            #web($pack->{module});
    }
};

my $list_pack = sub {
    my $p = shift;
    my @pack = ();
    my( @meta )= ();

    print "\n\n" . colored(['black on_yellow'],"STARTING list_pack ") . "\n";
    print colored(['yellow'],"received packlists: ") . "\n";
    print $_ . "\n" for (@$p);

    for my $path( @$p ){
        chomp(my $module = $path);

        # make module($pm) name from packlist($path)

        $module =~ s/(auto.*?\/)(.*?)(\/\.packlist)/$2/;
        $module = $2;
        $module =~ s/\//\:\:/g;
        print colored(['yellow'],"module is: ") . $module . "\n\n";

        print colored(['yellow'],"packlist content is:") . "\n";
        open( my $fh, "<", $path );
        while( <$fh>){
            chomp;

            #content(file paths) of current packlist
            #print ' |' . $_ . '| ';
            # --
            my $home = qr/$ENV{HOME}/;
            if( /\/cy\// ){
                if(/$home/){

                    s/(.*?)(\/cy\/)(.*)/$3/;
                    push @pack, $_;

                    print colored(['magenta'],"adding: ") . "$_ ";

                }
            } else {
                print colored(['red'],"skipping: ") . "$_ ";;
            }
            print "\n";
        }
        
        my $meta = meta($module);
        my $pkg = $meta->{pkg};

        my $pack = {
            pkg        =>  $pkg,
            module     =>  $module,
            path       =>  $path,
            packlist   =>  \@pack,
        };         
    push @meta, $pack;
    close $fh;
    }
    $check_pack->( \@meta );
};

$list_pack->(\@packlist_orig);
#my $repo = 'mobile@load.sh';
#$move_pack->($repo);

__DATA__
1. xz/lmza on telesphoero needs fix4 
tar -cf - usr | xz -9 -c - > ../data.tar.xz
tar -cf - usr | lzma -9 -c - > ../data.tar.lmzm
