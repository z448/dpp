#!/usr/bin/env perl
# repath and archive finished build on remote host

use 5.010;
use warnings;
use strict;

use JSON::PP;
use File::Find;
use File::Copy;
use Term::ANSIColor;
use Config;
use FindBin;
use lib "$FindBin::Bin/../lib";
use open qw< :encoding(UTF-8) >;
#use Term::ProgressBar;
use Acme::ProgressBar;
use Cydia::Meta;

my @directories = ( "$ENV{HOME}/.cypm/pool/cy");
my @packlist_orig;
my $p5 = sub {
     my @v5 = qx|perl -v|;
     my $v5 = '';
     for( @v5 ){
         if( /\(v5/ ){ s/(.*?\(v)(5.*?)\)(.*)/$1$2/; $v5 = $2 and last; }
     }
     return $v5;
};

my $p5v = $p5->();

my $repath = sub {
    my $stage = shift;
    my $p = path( $stage );
    my $i = 0;
    for( @{$p->{original}} ){
        move( $_, $p->{build}->[$i] );
        #print "move( $_, $p->{build}->[$i] )\n";
        $i++;
    }
};

#unlink("usr/local/lib/perl5/lib/perl5/arm-iphoneos-2level/auto/ExtUtils/MakeMaker/.packlist");
###! change to perl internal vars "perl -V...

my $cybase = {};
#my $base_path = "usr/lib/perl5";
my @base = qw( /man /bin /lib/perl5 /lib );
#my $sitelib =  $Config{sitelib};
#$sitelib =~ s/site_perl/lib/; $sitelib =~ s/^\///;
my $installsitelib = $Config{installsitelib}; $installsitelib =~ s/^\///;

for my $fix (@base){
    my $key = $fix; $key =~ s/\///g;
    $fix =~ s/^\///;

    $cybase->{$key} = $fix;
    #   say $key . ' -> ' .  $cybase->{$key};
}; 

system("cy/* $installsitelib");
#system("$cybase->{libperl5}/* $installsitelib");



# ---same on osx + ios---
# installsitescript -> /usr/local/bin
# installstyle -> lib/perl5
# installsitebin -> /usr/local/bin
#
# ---unique sitelib osx----
# installsitelib -> /Library/Perl/5.18
#
# ---unique sitelib ios----
# installprivlib -> /usr/local/lib/perl5/5.14.4
#
#

#move($cybase->{man}, "usr/local/man") and say "1. moved" . "$cybase->{man} to usr/local/man";
#move($cybase->{bin}, "usr/local/bin")  and say "2. moved" . "$cybase->{bin} to usr/local/bin";
#move($cybase->{libperl5}, $sitelib)  and say "3. moved" . "$cybase->{libperl5} to $sitelib";
#move("usr/local/lib/perl5/lib", "usr/local/lib/perl5/site_perl")  and say "4. moved" . "$cybase->{man} to $sitelib_stem";
#move("usr/local/lib/perl5/lib", $sitelib_stem)  and say "4. moved" . "$cybase->{man} to $sitelib_stem";


#move($cybase->{man}, "usr/local/man");
#move($cybase->{bin}, "usr/local/bin");
#move($cybase->{libperl5} , "usr/local/lib/perl5/lib/".$p5v);
###### move($cybase->{libperl5}, "$sitelib");
#move($cybase->{lib}, "$sitelib_stem");

#move( "usr/local/lib/perl5/man", "usr/local/man" );
#move( "usr/local/lib/perl5/bin", "usr/local/bin" );
#move( "usr/local/lib/perl5/lib/perl5", "usr/local/lib/perl5/lib/".$p5v );
#move( "usr/local/lib/perl5/lib", "usr/local/lib/perl5/site_perl" );

sub wanted { 
    if ( $_ eq '.packlist' ){
        chomp;
        push @packlist_orig, "$File::Find::dir/$_";
    }
    return \@packlist_orig 
}
find(\&wanted, @directories );

say "original packlist";
say @packlist_orig; 

my $O_O = sub {
    my $line = shift;
    my $colo = 'white on_bright_black';
    my $name = ' cypm';
    my $say = sub { say colored(['bright_black on_white'], $name ).'->'.colored([$colo], $line) };
    $say->();
};

# todo: add xz/lzma compression option (1)
my $move_pack = sub {
    my $repo = shift;
    my $cargo = <<"_CYDIA";
    cat .www >> ../.stash/cydia/.www
    mv *.deb ~/.cypm/.stash/cydia/deb
    cd $ENV{CYSTASH}/cydia
    cysp
    tar -zcvf cydia.tgz Packages.gz deb .www
    scp cydia.tgz $repo:~/www/cydia
_CYDIA
    my $transfer = sub {
        system("$cargo");
    }; $transfer->();
};

my $make_pack = sub { 
    my $pm = shift;
    my $ar = <<"_DEB";
    cd $pm; tar -xf data.tar.gz;
    rm data.tar.gz;
    tar czf ../data.tar.gz *;
    cd DEBIAN/;
    tar czf ../../control.tar.gz *;
    cd ../..;
    echo 2.0 > debian-binary;
    arfp r $pm.deb debian-binary control.tar.gz data.tar.gz;
_DEB
    #tar czf ../data.tar.gz [a-z]*;
    my $package = sub {
        my $packer = shift;
        my $status  = system($packer);
    }; 
    my $status = progress { $package->($ar) };
};

my $check_pack = sub {
    my $p = shift;
    my @m = @$p;

    for my $pack( @m ){
            $O_O->( "check>pack> received packlist for $pack->{pm_name}" );
            say "\tcheck>pack> path: $pack->{ path }"; print "check_pack processing content: \n";
            say "\ \ ".$_ for @{$pack->{ packlist }};
    
            my $make_path = system("mkdir -p $pack->{pkg}/DEBIAN");
            my $control = system("touch $pack->{pkg}/DEBIAN/control");
            my $fh = undef;
            $O_O->( "check>pack> creating control file for $pack->{pm_name}" );
            my $fn = "$ENV{HOME}/.cypm/pool/$pack->{pkg}/DEBIAN/control";
            open( $fh, '>', $fn ) or die "can't open $fn: $!";
            print $fh control("$pack->{pm_name}") . "\n";
            close $fh;
            $O_O->( "check>pack> control file content:" ); say "\n\t" . control($pack->{pm_name});

            my $packlist_fh = undef;
            open( $packlist_fh, "> $pack->{path}" ) or die "cant open it $!";

        #rewrite original packlist
            for(@{$pack->{ packlist }}){
                say $packlist_fh $_;
            }; close $packlist_fh;

        #create new data.pack using new packlist
            my $datapack = sub {
                my $tar = system("tar cz -T $pack->{path} -f $pack->{pkg}/data.tar.gz");
                my $mv = system("mv $pack->{path} $pack->{pkg}/");
            };
            print "\npulling datapack: ";  $datapack->();


        #call makepack, build deb
            print "\npackaging deb: "; $make_pack->( $pack->{ pkg } );
            #$O_O->( "make>pack>status->$status |$pack->{pkg} in stash|" ) unless $status;
            
        #move new packlist
        #system("mv $pack->{path} $pack->{pkg}");

        #web
            print "\nhtml div:"; web($pack->{pm_name});
            #$O_O->( "make>html>components->ok" ) unless $div;
    }

    my $stage = 'post';
    my $stage_S = $repath->( $stage );
    $O_O->( "check>pack>cleanup->ok" ) unless $stage_S;
};

my $list_pack = sub {
    my $p = shift;
    my @meta = ();

    say "list_pack received \$p \t-> $p\ncontent is: ";
    for( @$p ){ say "\t$_" }

    # if( /perl5\/lib\/perl5/ ){
    #   pop @$p;

    for my $path( @$p ){
        my $pm_name = $path; $pm_name =~ s/(auto.*?\/)(.*?)(\/\.packlist)/$2/; $pm_name = $2;
        $pm_name =~ s/\//\:\:/g;
        open( my $fh, $path );
        my ( @pack ) = ();
        $O_O->( "list>pack> original packlist contents:" );
        while(<$fh>){
            my $base = qr/$ENV{HOME}/; 
            chomp;
            say "\t$_";
            if( /\.cypm/ ){
                s/(.*?\.cypm\/.*?\/)(.*)/$2/;
                s/(usr\/local\/lib\/perl5\/)(lib\/perl5)(.*)/$1site_perl\/$p5v$3/;
                s/(usr\/local\/)(lib\/perl5\/bin)(.*)/$1bin$3/;
                s/(usr\/local\/)(lib\/perl5\/man)(.*)/$1man$3/;
                push @pack, $_ unless /perllocal/ and say "adding into packlist $_"
            }
        }; say "packlist repath done:".@pack;

        my $meta = meta($pm_name);
        my $pkg = $meta->{pkg};
        my $pack = {
            pkg         =>  $pkg,
            pm_name     =>  $pm_name,
            path        =>  $path,
            packlist    =>  \@pack,
        };         
    push @meta, $pack;
    close $fh;
    }
    $check_pack->( \@meta );
};

$list_pack->(\@packlist_orig);
my $repo = 'mobile@load.sh';
$move_pack->($repo);

__DATA__
1. xz/lmza on telesphoero needs fix4 
tar -cf - usr | xz -9 -c - > ../data.tar.xz
tar -cf - usr | lzma -9 -c - > ../data.tar.lmzm
