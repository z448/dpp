#!/usr/bin/env perl
# repath and archive finished build on remote host

use 5.010;
use warnings;
use strict;

use JSON::PP;
use File::Find;
use File::Copy;
use File::Path qw/make_path/;
use Term::ANSIColor;
use Data::Printer;
use UUID::Tiny ':std';
use Archive::Ar;
use Archive::Tar;
use Cydia::Meta;

my @directories = ( './');
my @packlist_orig;
my $p5_version = sub {
     my @v5 = qx|perl -v|;
     for( @v5 ){
         if( /\(v5/ ){ s/(.*?\(v)(5.*?)\)(.*)/$1$2/; return $2 and last; }}
};
my $p5v = &$p5_version;

move( "usr/local/lib/perl5/man", "usr/local/man" );
move( "usr/local/lib/perl5/bin", "usr/local/bin" );
move( "usr/local/lib/perl5/lib/perl5", "usr/local/lib/perl5/lib/".$p5v );
move( "usr/local/lib/perl5/lib", "usr/local/lib/perl5/site_perl" );
unlink("usr/local/lib/perl5/lib/perl5/arm-iphoneos-2level/auto/ExtUtils/MakeMaker/.packlist");

sub wanted { 
    if ( $_ eq '.packlist' ){
        chomp;
        push @packlist_orig, "$File::Find::dir/$_";
    }
    return \@packlist_orig 
}
find(\&wanted, @directories );

say "original packlist";
say @packlist_orig; 

sub dpkg { 
    my $pm = shift;
    my $ar = <<"_DEB";
    cd DEBIAN/;
    tar czf ../../control.tar.gz *;
    cd ../..;
    echo 2.0 > debian-binary;
    /var/root/perlpowertools/bin/ar r $pm.deb debian-binary control.tar.gz data.tar.gz;
_DEB
    #tar czf ../data.tar.gz [a-z]*;
    my $dpkg_deb = system("$ar");
    say "dpkg_deb status: $dpkg_deb";
    $dpkg_deb;
}

my $archive_pack_ = sub {
    my $packlist = shift;
    my @m = @$packlist;

    for my $pack( @m ){
        #      unless( $pack->{pm_name} eq $ARGV[0] ){
        #   next;
        #  }
        #else {
            say "\nreceived packlist for $pack->{ pm_name }";
            say "\tpath: $pack->{ path }"; print "processing content: \n";
            say "\t".$_ for @{$pack->{ packlist }};
    
            my $fh = undef;
            my $fn = '/var/root/.cypm/pool/DEBIAN/control';
            open( $fh, '>', $fn ) or die "can't open $fn: $!";
            print $fh control($pack->{pm_name})."\n";
            close $fh;

            my $tar = Archive::Tar->new;
            $tar->add_files( @{$pack->{packlist}} );
            $tar->create_archive( '../data.tar.gz', COMPRESS_GZIP, @{$pack->{packlist}} );
            #move( "~/.cypm/pool/usr", "~/.cypm/.stash/usr" );
            #$tar->write( "../data.tar.gz", COMPRESS_GZIP);
            #$tar->extract( @{$pack->{packlist}} );
            dpkg($pack->{ pkg });
            #die;
            #move( "~/.cypm/pool/usr", "~/.cypm/.stash/usr" );
            #$tar->extract("$pack->{ pkg }");
            #move( "data.tar.gz", "../" );
            #move( "~/.cypm/.stash/usr", "~/.cypm/pool/usr" );
            #unlink($pack->{ path });
        }
};


my $pack_list_ = sub {
    my $packlist = shift;
    my @meta = ();

    for my $path( @$packlist ){
        my $pm_name = $path; $pm_name =~ s/(auto.*?\/)(.*?)(\/\.packlist)/$2/; $pm_name = $2;
        my $pkg_name = 'lib'.lc $pm_name.'-p5';
        $pkg_name =~ s/\//\-/g;
        $pm_name =~ s/\//\:\:/g;
        open( my $fh, $path );

        my ( @pack ) = ();
        while(<$fh>){
                chomp;
                my $base = qr/$ENV{HOME}/; 
                unless( /$base\/.cypm/ ){
                    say "skiping $_"; next }
                else  {
                    s/(.*?\.cypm\/.*?\/)(.*)/$2/; 
                    s/(usr\/local\/lib\/perl5\/)(lib\/perl5)(.*)/$1site_perl\/$p5v$3/;
                    s/(usr\/local\/)(lib\/perl5\/bin)(.*)/$1bin$3/;
                    s/(usr\/local\/)(lib\/perl5\/man)(.*)/$1man$3/;
                    
                    push @pack, $_ unless /perllocal/ and say "adding into packlist $_" 
                }
                        
                    
            }; say "packlist repath done:".@pack;
            
            my $pack = {
                pkg         =>  $pkg_name,
                pm_name     =>  $pm_name,
                path        =>  $path,
                packlist    =>  \@pack,

            }; push @meta, $pack;
        
        close $fh;
        $archive_pack_->( \@meta );
        }
        #say encode_json \@meta;
    };



    


#my $arch = $archive_pack_->( \@packlist2 );
$pack_list_->(\@packlist_orig);

#print $path
