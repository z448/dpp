#!/usr/bin/env perl

use v5.10;
use warnings;
use strict;

#use File::Find;
use File::Copy;
use File::Path qw/make_path/;
use Term::ANSIColor;
use Data::Printer;
use UUID::Tiny ':std';
use Archive::Ar;
use Archive::Tar;

my @directories = ( './');
my @packlist = ();
my @packlist2 = ();
my $p5_version = sub {
     my @v5 = qx|perl -v|;
     for( @v5 ){
         if( /\(v5/ ){ s/(.*?\(v)(5.*?)\)(.*)/$1$2/; return $2 and last; }}
};
my $p5v = &$p5_version;

#find(\&wanted, @directories );

#move( "usr/local/bin/perl5/man", "usr/local/" );
move( "usr/local/lib/perl5/bin", "usr/local/bin" );
move( "bin", "usr/local/bin" );
move( "usr/local/lib/perl5/bin", "usr/local" );
move( "usr/local/lib/perl5/lib/perl5", 'usr/local/lib/perl5/lib/'.$p5v );
move( "usr/local/lib/perl5/lib", "usr/local/lib/perl5/site_perl" );
push @packlist, `find .`;
for( @packlist ){ chomp( $_ ); push @packlist2, $_ }
#sub wanted { push @packlist, "$File::Find::dir/$_" }
        


my $archive_pack_ = sub {
    my $p = shift;
    my $uuid = create_uuid_as_string(UUID_V1);
    #my $packline = sub { for( @$p ){ $stf = $stf.', '.$_ }; print "$stf" };

    my $pkg = {
        content =>  $p,
        path    =>  './',
        tgz     =>  './data.tar.gz',
        deb     =>  "./$uuid".'.deb',
    };

    my $ar = Archive::Ar->new;
    my $tar = Archive::Tar->new;

    say "packing \-\-\>\t ";
#.$pkg->{content};
    
    $tar->add_files( @$p );
    $tar->write( $pkg->{tgz} );
    $ar->add_files( $pkg->{tgz} );
    $ar->write( $pkg->{deb} );

    print "\tdone\n\tremoving \-\-\>\t".p( @$p );
    #unlink( @$p );
};

my $pack_list_ = sub {
    my $packlist = shift;
    my @packlist = ();

    for my $packlist( @$packlist ){
        my @pack = ();

        open my $fh, $packlist or say "Could not open $packlist: $!";

        while( my $line = <$fh>)  {   
            chomp( $line );
            push @pack, $line;
        }
        close $fh;
    }
};

my $arch = $archive_pack_->( \@packlist2 );
#my $paths = $pack_list_->(\@packlist2);
p($arch);

#print $path
