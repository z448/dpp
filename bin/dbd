#!/usr/bin/env perl

use 5.010;
use warnings;
use strict;

use JSON::PP;
use File::Find;
use File::Path;
use File::Copy;
use Term::ANSIColor;
use Config;
use FindBin;
use lib "$FindBin::Bin/../lib";
use open qw< :encoding(UTF-8) >;
use Cydia::Meta qw< control meta web >;

my( $base )= qw< ./cy >;
my @packlist_orig = ();
 
# --define dir paths
my $installsitelib = $Config{installsitelib}; $installsitelib =~ s/^\///;
my $installbin = $Config{installbin}; $installbin =~ s/^\///;
my $installsiteman1dir = $Config{installsiteman1dir}; $installsiteman1dir =~ s/^\///;
my $installman = $installsiteman1dir; $installman =~ s/(.*\/)(man1)/$1/;
my $installsiteman3dir = $Config{installsiteman3dir}; $installsiteman3dir =~ s/^\///; #$installsiteman3dir =~ s/(.*\/)(man3)/$1/;
my $dpp_tar_lib = $installsitelib; $dpp_tar_lib =~ s/(.*?)(\/.*)/$1/;
my $dpp_tar_bin = $installbin; $dpp_tar_bin =~ s/(.*?)(\/.*)/$1/;
my @dir = ($installsitelib, $installbin);
my @install_dir = ();

find( sub {
        if(/\.packlist/){
            push @packlist_orig, "$File::Find::dir/$_"
}}, $base);
print colored(['blue'],"original packlists: ") . "\n";
print $_ . "\n" for @packlist_orig;

print colored(['blue'],"install directories:") . "\n";
my $mkpath_installsitelib = sub {
    mkpath($installsitelib);
    push @install_dir, $installsitelib;
    print "installsitelib: " . $installsitelib . "\n";
};

my $mkpath_installbin = sub {
    mkpath($installbin);
    push @install_dir, $installbin;
    print "installbin: " . $installbin . "\n";
};

my $mkpath_installsitemandir = sub {
    mkpath($installsiteman1dir);
    mkpath($installsiteman3dir);
    push @install_dir, $installsiteman3dir;
    push @install_dir, $installsiteman1dir;
    print "installsiteman1dir: " . $installsiteman1dir . "\n";
    print "installsiteman3dir: ") . $installsiteman3dir . "\n";
};

my $move_pack = sub {
    my $repo = shift;
    my $cargo = <<"_CYDIA";
    cat .www >> ../.stash/cydia/.www
    mv *.deb ~/.dpp/.stash/cydia/deb
    cd $ENV{CYSTASH}/cydia
    cysp
    tar -zcvf cydia.tgz Packages.gz deb .www
    scp cydia.tgz $repo:~/www/cydia
_CYDIA
    my $transfer = sub { system("$cargo") };
    $transfer->();
};

my $make_pack = sub { 
    my $pm = shift;
    my $dir = ' ';

    for(@dir){
        if(-d $_){ $dir .= $_ . ' ' }
    }

    my $ar = <<"_DEB";
    cd $pm; tar -xvf data.tar.gz;
    rm data.tar.gz;
    tar czf ../data.tar.gz $dir;
    cd DEBIAN/;
    tar czf ../../control.tar.gz *;
    cd ../..;
    echo 2.0 > debian-binary;
    arfp r $pm.deb debian-binary control.tar.gz data.tar.gz;
    mv $pm.deb ~/.dpp/.stash/deb;
    rm -rf debian-binary control.tar.gz data.tar.gz DEBIAN;
_DEB
    my $package = sub {
        my $packer = shift;
        my $status  = system($packer);
    };  my $status = $package->($ar);
};

my $check_pack = sub {
    my $p = shift;
    my $cpanm = {};

    $cpanm->{lib} = "$base/lib/perl5";
    $cpanm->{bin} = "$base/bin";
    $cpanm->{man} = "$base/man";

    if(-d $cpanm->{lib}){ $mkpath_installsitelib->() and system("mv $cpanm->{lib}/* $installsitelib") }
    if(-d $cpanm->{bin}){ $mkpath_installbin->() and system("mv $cpanm->{bin}/* $installbin") }
    if(-d $cpanm->{man}){ $mkpath_installsitemandir and system("mv $cpanm->{man}/* $installman") }

    for my $pack( @$p ){
            # -- list content of received packlist
            print "packlist path: " . $pack->{path} . "\n";
            print "pkg: " . $pack->{pkg} . "\n";
            print "packlist content: " . "\n";
            for(@{$pack->{packlist}}){ print $_ . "\n" }
    
            my $make_path = mkpath("$pack->{pkg}/DEBIAN");

            my $fh = undef;
            my $fn = "$ENV{HOME}/.dpp/build/$pack->{pkg}/DEBIAN/control";
            open( $fh, ">", $fn ) || die "cant open $fn";
            print $fh control("$pack->{module}") . "\n";
            close $fh;
            print "\n" . colored(['green'],"control file: ") . $pack->{module} . "\n";
            say control($pack->{module});

            my $installsitelib_dir = $installsitelib;
            $installsitelib_dir =~ s/(.*?)(\/.*)/$1/;
            my( $dpp_packlist ) = ();

            find( sub{ if( /\.packlist/ ){ 
                        $dpp_packlist = "$File::Find::dir/$_";
                        print "rm: " . $pack->{path} . "\n";
                        unlink($pack->{path});
            }}, $installsitelib_dir );
                
            find( sub{ unless(/perllocal\.pod/){
                        if( -f $_ ){ 
                            open( my $findh, ">>", "$ENV{DPP}/build/$pack->{pkg}/.packlist" ) || die "cant open $pack->{pkg}/.packlist: $!";
                            print '+ ' . "$File::Find::dir/$_" . "\n";
                            say $findh "$File::Find::dir/$_";
                        } else {
                        print "- ") . "$File::Find::dir/$_" . "\n";
                        open(my $fh,">>", "$ENV{DPP}/build/.remove") || die "cant open $!";
                        close $fh;
                    }}}, @install_dir );

            my $datapack = sub {
                my $tar = system("tar cz -T $pack->{pkg}/.packlist -f $pack->{pkg}/data.tar.gz");
            }; $datapack->();

            #call make_pack, build deb
            unless( $make_pack->($pack->{pkg}) ){
                print "$pack->{pkg}: " . colored(['green'], "ok") . "\n";
                web($pack->{module}) and print "index.json: $pack->{module}j" . colored(['green'], "ok") . "\n";
            }

            my $cleanup = sub {
                system("rm -rf $ENV{DPP}/build/$pack->{pkg}");
            };  print 'cleanup: ' . colored(['green'], "ok") . "\n" unless $cleanup->();
    }
};

my $list_pack = sub {
    my $p = shift;
    my @pack = ();
    my( @meta )= ();
 
    print "\n\n" . colored(['green'],"packlists: ") . "\n";
    print $_ . "\n" for (@$p);

    for my $path( @$p ){
        chomp(my $module = $path);

        # make module($pm) name from packlist($path)
        $module =~ s/(auto.*?\/)(.*?)(\/\.packlist)/$2/;
        $module = $2;
        $module =~ s/\//\:\:/g;
        print "module:" . $module . "\n";
        print "packlist content:" . "\n";
        open( my $fh, "<", $path );
        while( <$fh>){
            chomp;
            #content(file paths) of current packlist
            my $home = qr/$ENV{HOME}/;
            if( /\/cy\// ){
                if(/$home/){
                    s/(.*?)(\/cy\/)(.*)/$3/;
                    push @pack, $_;
                }
            } 
            print "\n";
        }
        
        my $meta = meta($module);
        my $pkg = $meta->{pkg};
        my $pack = {
            pkg        =>  $pkg,
            module     =>  $module,
            path       =>  $path,
            packlist   =>  \@pack,
        };         
    push @meta, $pack;
    close $fh;
    }
    $check_pack->( \@meta );
};

$list_pack->(\@packlist_orig);

my $make_html = sub {
    my $json_file = "$ENV{DPP}/assets/html/index.json";
    my $html_file= "$ENV{DPP}/assets/html/index.html";

    open(my $fh,"<",$json_file) || die "cant open $json_file: $!";
    my $index_json = <$fh>;
    my $index_hash = decode_json $index_json;
    close $fh;
         
    open($fh,">",$html_file) || die "cant open $html_file: $!";
    for( @{$index_hash->{head}} ){ print $fh $_ }
    for( @{$index_hash->{style}} ){ print $fh $_ }
    for( @{$index_hash->{body}} ){ print $fh $_ }
    for( @{$index_hash->{foot}} ){ print $fh $_ }

};  print "index.html: " . colored(['green'], 'ok') unless $make_html->();

rmdir "$ENV{DPP}/build/cy";

__DATA__
1. xz/lmza on telesphoero needs fix4 
tar -cf - usr | xz -9 -c - > ../data.tar.xz
tar -cf - usr | lzma -9 -c - > ../data.tar.lmzm
