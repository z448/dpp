#!/usr/bin/env perl
#
use 5.010;
use warnings;
use strict;

use Net::OpenSSH;
use Term::ANSIColor;
use File::Path;
use Config;
use Getopt::Std;
use Cwd 'abs_path';

my %option = ();
# -h list of hosts
# -c pass option to cpanm
# -m perl::module
getopts('hm:c:', \%option);

my $base = "$ENV{HOME}/.dpp/build";
my $cypm = $base . '/cy';
my $pm = $option{m} || " ";
my $cpanm_option = $option{c} || " ";
my $installsitelib = $Config{installsitelib};
$installsitelib =~ s/^\///;
mkpath("$cypm/$installsitelib");

my $installbin = $Config{installbin};
$installbin =~ s/^\///;
mkpath("$cypm/$installbin");

my $cytar_lib = $installsitelib;
$cytar_lib =~ s/(.*?)(\/.*)/$1/;
mkpath("$cypm/$cytar_lib");

my $build = ". ~/.dpp/.env &&  cpanm -n -f $cpanm_option --reinstall -L $cypm $pm";

sub install {
    if(defined $option{m}){
    # no option installs on local hosts
        my $install = sub { system("$build") };
        return \$install->();
    } elsif(defined $option{h}){
        # -h 'list of hosts' ;todo:split list of hosts into @hosts
        my @hosts = split(" ", $option{h});
        say "\nrunning:"; print colored( "$build\n", 'blue' ); say "on: @hosts ";
        my %conn = map { $_ => Net::OpenSSH->new($_, async => 1) } @hosts;
        my @pid;
        for my $host (@hosts) {
            open my($fh), '>', "/tmp/out-$host.txt"
              or die "unable to create file: $!";
            push @pid,  $conn{$host}->spawn({stdout_fh => $fh}, $build);
        } 
    waitpid($_, 0) for @pid;
    } 
}

unless($option{m}){ system("perldoc $0")};
say ${install()};
system("cd $base && dbd $pm");

=head1 NAME

=over 12
=item dpp

debian perl packager

=back

=head1 SYNOPISIS

=over 12

=item create debian binary packages from Perl modules

=back

=head1 INSTALLATION

=over 12

=item Clone repository

C<git clone https://github.com/z448/dpp>

=item Install dependencies with L<Carton>

C<carton install>

=item Setup environment

C<. setup>

=back

=head1 USAGE

=over 12

=item create package 

C<dpp -m Perl::Module>

=item - package directory $HOME/.dpp/.stash/deb

=item - build directory $HOME/.dpp/build

=item - use L<CTRL-P> & L<CTRL-G>to switch between build & deb directories

=back

=cut

