#!/usr/bin/env perl

use 5.010;
use warnings;
use strict;

use Sys::Hostname;
use Term::ANSIColor;
use Getopt::Std;
use App::Dpp qw< conf digest >;
use Data::Dumper;
use JSON::PP;
use Config;
use File::Find;
use File::Path qw< remove_tree mkpath >;
use open qw< :encoding(UTF-8) >;

=head1
#STDOUT->autoflush(1);
#
my $opt = {};
getopts('d:', $opt);

my $conf = sub {
    my $module = shift;
    my $c = conf($module);
    return $c;
};
=cut

# takes path to site_perl dir; returns array ref with all .packlist paths
sub find_packlist {
    my $siteperl_path = shift;
    my @packlist_file = ();
    find( sub {
            if(/\.packlist/){
                push @packlist_file, "$File::Find::dir/$_";
            }
        }, $siteperl_path );
    return \@packlist_file;
}

# takes array ref containing .packlist paths;
# makes hash ref containing { pkg => package name, module => module name, path => .packlist path, packlist => .packlist contents, control => control file }
sub parse_packlist {
    my $packlist_path = shift;

    my $md5sums = sub {
        my $file = shift;
        my $md5 = digest($file) . '  ' . $file;
        return $md5;
    };

    my %dir_seen = (); # remember processed dirs 

    my $preinst = sub {
        my $file = shift;
        my $dir = $file; $dir =~ s/(.*)(\/.*)/$1/; 

        # return sub for dir unless it has been aleady processed
        if( grep { $dir_seen{"$dir"} ++ } ($dir) ){ return }
        else {
            $dir_seen{"$dir"} = 1;
            my $mode = (stat($dir))[2];
            $mode = $mode & 07777;
            return sub{
                my $fh = shift;
                print $fh "if [ ! -d $dir ]; then mkdir -p $dir && chmod "; printf $fh ("%04o", $mode); print $fh " $dir; fi\n";
                #print $fh "mkdir -p $dir && chmod "; printf $fh ("%04o", $mode); print $fh " $dir\n";
            };
        }
    };

    for my $path( @$packlist_path ){
        chomp($path);
        my( @pack, @preinst, @md5sums ) = (); # add packlist path into pack so installed packages can be managed by cpanm
        push @preinst, $preinst->($path);
        push @md5sums, $md5sums->($path);


        # module name from packlist($path)
        my $module = $path;
        $module =~ s/(auto.*?\/)(.*?)(\/\.packlist)/$2/;
        $module = $2;
        $module =~ s/\//\:\:/g;
        #my $c = $conf->("$module");
        my $c = conf($module);
        say Dumper $c->{module}->{control};

        # read content of packlist
        open(my $fh,'<', $path) || die "cant open $path:$!";
        while( <$fh> ){ 
            chomp($_);
            push @pack, $_;
            push @preinst, $preinst->($_);
            push @md5sums, $md5sums->($_);
        }
        close $fh;

        $c->{package} = $c->{module}->{package};
        $c->{path} = $path;
        $c->{packlist} = \@pack;
        $c->{md5sums} = \@md5sums;
        $c->{preinst} = \@preinst;

        pack_packlist($c);
        %dir_seen = (); # reset uniq packlist directories for next package

    }
};

sub pack_packlist {
    my $c = shift;

    #say Dumper $c; die;#test

    open my $psss, '>&', STDERR;
    open STDERR, '+>', undef;

    my($a,$b) = split('::',$c->{module}->{name});
    print $a . colored(['red'],'::') . $b . colored(['grey6']," [$c->{module}->{version}] -> ");

    my $pack_path = "$c->{dir}->{build}/$c->{module}->{package}";

    remove_tree( $c->{dir}->{build} ); mkpath("$pack_path");
    system("tar pcz $c->{path} -T $c->{path} -f $c->{dir}->{build}/data.tar.gz && cd $c->{dir}->{build} && mv data.tar.gz .. && rm -rf * && mv ../data.tar.gz . && mkdir -p $pack_path/DEBIAN");

    # write preinst script
    open(my $fh,">", "$pack_path/DEBIAN/preinst") || die "cant open $pack_path/DEBIAN/preinst$!";
    print $fh "#!/bin/sh\n\n";
    $_->($fh) for @{$c->{preinst}};
    close $fh;
    
    # write control file
    my %control = %{$c->{module}->{control}};
    my $control = ();
    for( keys %control ){
        next unless defined $control{$_};
        $control .= $_ . ': ' . $control{$_} . "\n"; 
    }
    open($fh,">", "$pack_path/DEBIAN/control") || die "cant open $pack_path/DEBIAN/control: $!";
    print $fh $control;
    close $fh;

    # write md5sums file
    open($fh,">", "$pack_path/DEBIAN/md5sums") || die "cant open $pack_path/DEBIAN/md5sums: $!";
    print $fh $_ . "\n" for @{$c->{md5sums}};
    close $fh;

    # make .deb
    my $deb = system("cd $pack_path/DEBIAN && chmod 0755 preinst && tar czf ../../control.tar.gz * && cd ../.. && echo '2.0' > debian-binary && ar r $c->{module}->{debfile} 'debian-binary' 'control.tar.gz' 'data.tar.gz' && mv $c->{module}->{debfile} $c->{dir}->{deb}");
    open STDERR, '>&', $psss;

    binmode(STDOUT, ":utf8");
    my $pkg = "\N{U+1F4E6}" . ' ' . "\N{U+1F500}";
    say colored(['bright_white'],$pkg) . '  '  unless $deb;

    # add to index.html
    open($fh,'>>',"$c->{dir}->{dpp}/index.html") || die "cant open $c->{dir}->{dpp}/index.html:$!";
    say $fh $c->{html}->{body};
    close $fh;

    remove_tree($c->{dir}->{build});
    return $c;
}

my $p = $ARGV[0] || $Config{installsitearch};
#die "add path to perl modules dir" unless $p;
parse_packlist(find_packlist($p));

