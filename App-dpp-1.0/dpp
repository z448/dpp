#!/usr/bin/env perl

use 5.010;
use warnings;
use strict;

use Term::ANSIColor;
use Getopt::Std;
use App::Dpp qw< control meta web init cleanup >;
use Data::Dumper;
use JSON;
use Config;
use File::Find;
use open qw< :encoding(UTF-8) >;#use App::Dpp;

my $options = {};
getopts('d:', $options);

sub find_packlist {
    my $siteperl_path = shift;
    my @packlist_file = ();

    find( sub {
            if(/\.packlist/){
                push @packlist_file, "$File::Find::dir/$_";
            }
        }, $siteperl_path );
    return \@packlist_file;
}


sub parse_packlist {
    my $packlist_path = shift;
    my( @meta )= ();
 
    #print "\n\n" . colored(['green'],"packlists: ") . "\n";
    #print $_ . "\n" for (@$packlist_path);

    for my $path( @$packlist_path ){
        my @pack = ();
        chomp($path);
        my $module = $path;

        # make module($pm) name from packlist($path)
        $module =~ s/(auto.*?\/)(.*?)(\/\.packlist)/$2/;
        $module = $2;
        $module =~ s/\//\:\:/g;
        open( my $fh, "<", $path );
        while( <$fh>){ chomp and push @pack, $_ }
        
        my $meta = meta($module);
        my $pkg = $meta->{pkg};
        my $pack = {
            pkg        =>  $pkg,
            module     =>  $module,
            path       =>  $path,
            packlist   =>  \@pack,
            control    =>  control($module),
        };         

        while( my($key, $value) = each(%$pack)){
            if($key eq 'packlist'){
                print $key . "\t -->";
                print @$value;
                print "\n";
            } else {
                print $key . "\t --> " . $value . "\n";
            }
        }
        print "\n";

    push @meta, $pack;
    close $fh;
    }
};

parse_packlist(find_packlist("/usr/local/lib/perl5/site_perl"));


