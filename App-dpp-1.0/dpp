#!/usr/bin/env perl

use 5.010;
use warnings;
use strict;

use Term::ANSIColor;
use Getopt::Std;
use App::Dpp qw< conf digest >;
use Data::Dumper;
use JSON::PP;
use Config;
use File::Find;
use File::Path;
use open qw< :encoding(UTF-8) >;

my $opt = {};
getopts('d:', $opt);

# takes path to site_perl dir; returns array ref with all .packlist paths
sub find_packlist {
    my $siteperl_path = shift;
    my @packlist_file = ();

    find( sub {
            if(/\.packlist/){
                push @packlist_file, "$File::Find::dir/$_";
            }
        }, $siteperl_path );
    return \@packlist_file;
}

# takes array ref containing .packlist paths;
# makes hash ref containing { pkg => package name, module => module name, path => .packlist path, packlist => .packlist contents, control => control file }
sub parse_packlist {
    my $packlist_path = shift;
    my( @meta )= ();

    #mkpath("$dir->{build}");
    #my $tmp_pack_file = "$dir->{build}/tmp_pack_file.tar.gz";
 
    for my $path( @$packlist_path ){
        my @pack = ();
        chomp($path);

        # make module($pm) name from packlist($path)
        my $module = $path;
        $module =~ s/(auto.*?\/)(.*?)(\/\.packlist)/$2/;
        $module = $2;
        #my $module_first_dir = $2;
        #$module_first_dir =~ s/(.*?)(\/.*)/$1/;
        #$module_first_dir = $1;
        $module =~ s/\//\:\:/g;

        # my $module_root_dir = $_;
        #$module_root_dir =~ s/(.*?$module_first_dir)(\/.*)/$1/;

        #system("tar -cz -T $path -f $tmp_pack_file && cd $dir->{build} && tar -xf $tmp_pack_file && rm -rf $tmp_pack_file && find . > ../packlist");
	my @preinst =  ('#!/bin/sh');
    my @md5sums = ();
        open(my $fh,'<', $path) || die "cant open $path:$!";
        while( <$fh> ){ 
            chomp;
            push @pack, $_;
            my $md5 = $_; $md5 = digest($md5) . '  ' . $md5;
            push @md5sums, $md5;
            my $dir = $_; $dir =~ s/(.*)(\/.*)/$1/;
            $dir = $1;
            print $dir;
            push @preinst, qq|mkdir -p $dir;|;
        }; 
        close $fh;
        #    uniq
        my %dir_seen = ();
        @preinst = grep { ! $dir_seen{"$_"} ++ } @preinst;

        #open(my $pipe,'-|', "tar -xvf $tmp_pack_file") || die "cant open $pipe: $!";
        #while( <$pipe> ){ chomp and push @pack, '/' . $_ }

        #open( my $fh, "<", "$dir->{dpp}/packlist");
        #    while( <$fh>){ 
        #        chomp and push @pack, $_ ;
        #    }
        #}
           #       s/(.*)(\/.*)/$1/; push @pack, $1; # risky; wont work if there is directory with nothing else but another directory todo

        my $c = conf($module);
        $c->{package} = $c->{module}->{package};
        $c->{path} = $path;
        $c->{packlist} = \@pack;
        $c->{md5sums} = \@md5sums;
        $c->{preinst} = \@preinst;
=head1
       # my $meta = meta($module);
       # my $pkg = $meta->{pkg};
       # my $pack = {
        #    pkg        =>  $pkg,
         #   module     =>  $module,
          #  path       =>  $path,
           # packlist   =>  \@pack,
           # md5sums    =>  \@md5sums,
           # preinst    =>  \@preinst,
           # control    =>  control($module),
        #};         
=cut
#push @{$pack->{packlist}}, $pack->{$path};
        #push @pack, $path;

#   push @meta, $pack;
        #close $fh;
        #print "packing $pack->{module}\t" . ' <--> ' . "$pack->{pkg}\t\n";
    pack_packlist($c);
    #pack_packlist($pack);
}
};

sub pack_packlist {
    #my $meta_pack = shift;
    my $c = shift;
    #my $path = init();

    #my $build_path = init('build');
    my $pack_path = $c->{dir}->{build} . "/$c->{module}->{package}";
    #my $pack_path = $path->{build} . "/$meta_pack->{pkg}";
    #my $path->{deb} = init('deb');
    mkpath("$pack_path");
    #mkpath("$path->{build}/$meta_pack->{pkg}");

    # tar packlist content into data.tar.gz
    #system("tar -pzcf $dir->{build}/data.tar.gz $dir->{dpp}/packlist && cd $dir->{build} && mv data.tar.gz .. && rm -rf * && mv ../data.tar.gz . && cd -");
    system("tar pcz -T $c->{path} -f $c->{dir}->{build}/data.tar.gz && cd $c->{dir}->{build} && mv data.tar.gz .. && rm -rf * && mv ../data.tar.gz . && cd -");
    #system("tar pcz -T $meta_pack->{path} -f $dir->{build}/data.tar.gz && cd $dir->{build} && mv data.tar.gz .. && rm -rf * && mv ../data.tar.gz . && cd -");

    #system("mkdir $path->{build} && tar cz -T $meta_pack->{path} -f $path->{build}/data.tar.gz && cd $path->{build} && tar -xvf data.tar.gz && rm -rf data.tar.gz && rm -rf $pack_path  && tar -zcvf data.tar.gz * && mv data.tar.gz .. && rm -rf * && mv ../data.tar.gz . && cd -");
    mkpath("$pack_path/DEBIAN");

    # write preinst script
    open(my $fh,">", "$pack_path/DEBIAN/preinst") || die "cant open $pack_path/DEBIAN/preinst$!";
    print $fh "$_\n" for @{$c->{preinst}};
    close $fh;
    
    # write control file
    my %control = %{$c->{module}->{control}};
    my $control = ();
    for( keys %control ){
        $control .= $_ . ': ' . $control{$_} . "\n"; 
    }
    open($fh,">", "$pack_path/DEBIAN/control") || die "cant open $pack_path/DEBIAN/control: $!";
    print $fh $control;
    close $fh;

    # write md5sums file
    open($fh,">", "$pack_path/DEBIAN/md5sums") || die "cant open $pack_path/DEBIAN/md5sums: $!";
    print $fh $_ . "\n" for @{$c->{md5sums}};
    close $fh;

    # make .deb
    my $packer = <<"_DEB";

    cd $pack_path/DEBIAN;
    chmod 0755 preinst;
    tar pczf ../../control.tar.gz *;
    cd ../..;
    echo 2.0 > debian-binary;
    ar r $c->{module}->{package}.deb debian-binary control.tar.gz data.tar.gz;
    mv $c->{module}->{package}.deb $c->{dir}->{deb};
    rm -rf $c->{module}->{package};
    rm -rf debian-binary control.tar.gz data.tar.gz DEBIAN;
_DEB
    system("$packer");
    #eval { web("$meta_pack->{module}") };
#    make_html($c);
    #die;
        print Dumper($c);
        die;
}

sub make_html {
    my $c = shift;
    my $json_file = $c->{htmlconf}->{conf};
    #my $json_file = "$ENV{HOME}/dpp/index.json";
    my $html_file = "$c->{htmlconf}->{html}";
    #my $html_file = "$ENV{HOME}/dpp/index.html";

    open(my $fh,"<",$json_file) || die "cant open $json_file: $!";
    my $index_json = <$fh>;
    my $index_hash = decode_json $index_json;
    close $fh;
         
    open($fh,">",$html_file) || die "cant open $html_file: $!";
    for( @{$index_hash->{head}} ){ print $fh $_ }
    for( @{$index_hash->{style}} ){ print $fh $_ }
    for( @{$index_hash->{body}} ){ print $fh $_ }
    for( @{$index_hash->{foot}} ){ print $fh $_ }

}





my $p = $ARGV[0] || $Config{installsitearch};
#die "add path to perl modules dir" unless $p;
parse_packlist(find_packlist($p));


